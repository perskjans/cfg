#!/bin/bash
# vim: set filetype=sh shiftwidth=2 :

reposfile=~/.cache/gitrepos.dat

getbranch()
{
    git branch --no-color | grep "^* " | cut -c 3-
}

# Show the git commit status.
commit_status()
{
    local status=$(git status -u | egrep -io "deleted|conflict|copied|modified|new|renamed|unstage|untracked" | tr [:upper:] [:lower:] | sort | uniq | tr "\n" " ")
    for line in $status
    do
        case $line in
        new)
            P_GIT_STATUS="$P_GIT_STATUS ${TC_FG_YELLOW}N${TC_RESET}" ;;
        untracked)
            P_GIT_STATUS="$P_GIT_STATUS ${TC_FG_CYAN}U${TC_RESET}" ;;
        modified)
            P_GIT_STATUS="$P_GIT_STATUS ${TC_FG_BLUE}M${TC_RESET}" ;;
        deleted)
            P_GIT_STATUS="$P_GIT_STATUS ${TC_FG_RED}D${TC_RESET}" ;;
        renamed)
            P_GIT_STATUS="$P_GIT_STATUS ${TC_FG_MAGENTA}R${TC_RESET}" ;;
        copied)
            P_GIT_STATUS="${TC_FG_MAGENTA}C${TC_RESET} $P_GIT_STATUS ," ;;
        unstage)
            P_GIT_STATUS="$P_GIT_STATUS ${TC_FG_GREEN}S${TC_RESET}" ;;
        conflict)
            P_GIT_STATUS="$P_GIT_STATUS ${TC_FG_RED}UU${TC_RESET}" ;;
        *)
            P_GIT_STATUS="UNKNOWN STATUS"
            return 1
        ;;
        esac
    done

    return 0
}


current_status()
{
  unset P_GIT_STATUS
    # If we're inside a .git directory, we can't find the branch / commit status.
    if pwd | grep -q /.git; then
        return 0
    fi

    if git rev-parse --git-dir >/dev/null 2>&1; then
        gs_branch=$(getbranch)
        #gs_gitstatus=$(commit_status)
        commit_status

        if [ $? -eq 0 ]; then
            #if [ -z "$gs_gitstatus" ]; then
            if [ -z "$P_GIT_STATUS" ]; then
              echo -e "${TC_FG_BLUE}[${TC_RESET}GIT: '$gs_branch' ${TC_FG_GREEN}Up-to-date${TC_RESET}${TC_FG_BLUE}]${TC_RESET}"
            else
              echo -e "${TC_FG_BLUE}[${TC_RESET}GIT: '$gs_branch'$P_GIT_STATUS${TC_FG_BLUE}]${TC_RESET}"
            fi
        fi
    fi
}

setupstream()
{
  git push --set-upstream origin $(getbranch)
}

deleteupstream()
{
  git push --delete origin $(getbranch)
}

reporoot()
{
  git rev-parse --show-toplevel
}

repostatus()
{
  reposfile_tmp=$reposfile\_tmp
  cat $reposfile | sort | uniq > $reposfile_tmp
  dirs=$(cat $reposfile_tmp)

  rm -f $reposfile
  touch $reposfile

  for dir in $dirs;
  do
    if [ -d $dir ]; then
      echo $dir >> $reposfile
    fi
  done

  rm -f $reposfile_tmp
}

findall()
{
  reposfile_tmp=$reposfile\_tmp
  find $(pwd) -name ".git" -type d | sed "s/\/\.git//g" | sort | uniq >> $reposfile_tmp
  cat $reposfile_tmp | sort | uniq > $reposfile
  rm $reposfile_tmp
}

clone()
{
  result=$(git clone $* 2>&1)
  exit_code=$?

  if [ "$exit_code" != "0" ]; then
    echo -e "${TC_FG_RED}${result}${TC_RESET}"
    exit $exit_code
  fi

  echo -e "${TC_FG_GREEN}${result}${TC_RESET}"
  dir=$(echo $result | cut -d"'" -f2)
  echo $(pwd)/$dir >> $reposfile

  repostatus
}

pull()
{
  dir=$1
  pushd $dir >/dev/null
  result=$(git pull 2>&1)

  if [ "$result" != "Already up to date." ]; then
    echo
    echo $dir
    echo -e "${TC_FG_CYAN}${result}"
    echo
    git gc --auto
    echo -e "${TC_RESET}"
  fi

  popd >/dev/null
}

pullall()
{
  if [[ $# -gt 0 ]]; then
    FILTER="$1"
  else
    FILTER="/"
  fi

  echo
  echo FILTER: "$FILTER"
  echo

  repostatus

  dirs=$(cat $reposfile | egrep "$FILTER")

  for dir in $dirs;
  do
    [ -d $dir ] && pull $dir
  done
}

get_submodule_path()
{
  cat $(reporoot)/.gitmodules | grep "\"$1\"" -A 1 | grep path | cut -d' ' -f3
}

submodule_action_after()
{
  local path=$1
  cd $path
  [ -f [mM]akefile ] && make
}

submoduleadd()
{
  local destdir=$1; shift
  local url=$1; shift
  local args="$*"
  local name=${url##*/}
  name=${name%.git}
  local path=$destdir/$name
  local gitroot=$(reporoot)
  cd $gitroot

  echo Running: git submodule add --name $name $args "$url" $path
  git submodule add --name $name $3 "$url" $path
  [ $? ] && submodule_action_after "$path"
  cd - >/dev/null 2>&1
}

submoduleupdate()
{
  local module=$1; shift
  local args="$*"
  local gitroot=$(reporoot)
  local path=$(get_submodule_path $module)
  cd $gitroot

  if [ "$path" = "" ]; then
    echo "No submodule match for $module!"
    return 1
  fi

  echo Running: git submodule update $args $path
  git submodule update $args $path
  cd - >/dev/null 2>&1
}

submoduleinit()
{
  local module=$1; shift
  local args="$*"
  local gitroot=$(reporoot)
  local path=$(get_submodule_path $module)
  cd $gitroot

  if [ "$path" = "" ]; then
    echo "No submodule match for $module!"
    return 1
  fi

  echo Running: git submodule init $args $path
  git submodule init $args $path
  cd - >/dev/null 2>&1
}

submoduledeinit()
{
  local module=$1; shift
  local args="$*"
  local gitroot=$(reporoot)
  local path=$(get_submodule_path $module)
  cd $gitroot

  if [ "$path" = "" ]; then
    echo "No submodule match for $module!"
    return 1
  fi

  echo Running: git submodule deinit $args $path
  git submodule deinit $args $path
  cd - >/dev/null 2>&1
}

submodulerm()
{
  echo "$*"
  local module=$1; shift
  local args="$*"
  local gitroot=$(reporoot)
  local path=$(get_submodule_path $module)
  cd $gitroot

  if [ "$path" = "" ]; then
    echo "No submodule match for $module!"
    return 1
  fi

  echo Running: git submodule deinit $args $path
  git submodule deinit $args $path
  if [ $? -eq 0 ]; then
    echo Running: git rm $path $args
    git rm $gitroot/$path $args && rm -rf $gitroot/.git/modules/$module
  fi
  cd - >/dev/null 2>&1
}


$*
exit $?
